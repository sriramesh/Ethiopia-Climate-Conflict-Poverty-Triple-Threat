pal = raster_colorPal)
# generate simplified Palmer Drought Index using annual temperature and rainfall data ----
# normalize bio1 data using the following formula: (actual val - min val) / (max val - min val) ----
r1 <- ETH_bio1
min_val = minValue(ETH_bio1)
max_val = maxValue(ETH_bio1)
r1 <- overlay(r1, fun=function(x){return( (x - min_val)/(max_val - min_val) )})
raster_colorPal <- colorNumeric(palette = topo.colors(64),
domain = values(r1),
na.color = NA)
#
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(x = r1,
color = raster_colorPal) %>%
addLegend(title = "Bio 1 Annual Mean Temp - Normalized",
values = values(r1),
pal = raster_colorPal)
# normalize bio12 data using same formula ----
r2 <- ETH_bio12
min_val = minValue(ETH_bio12)
max_val = maxValue(ETH_bio12)
r2 <- overlay(r2, fun=function(x){return( (x - min_val)/(max_val - min_val) )})
raster_colorPal <- colorNumeric(palette = topo.colors(64),
domain = values(r2),
na.color = NA)
leaflet() %>% # Plot
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(x = r2,
color = raster_colorPal) %>%
addLegend(title = "Bio 12 Annual Precipitation - Normalized",
values = values(r2),
pal = raster_colorPal)
# resample bio12 raster to bio1 extent and resolution using bilinear interpolation
r2 <- r2 %>%
raster::resample(r1, method="bilinear")
# generate simplified Palmer Drought Index by taking mean of the two normalized indices ----
r3 <- overlay(r1, r2, fun=function(x, y){return( abs(x - y) )})
# save raster to disk
writeRaster(r3,'simplified_palmer_index.tif',options=c('TFW=YES'))
# aggregate indices to ETH Adm 1 regions to map choropleth ----
# load ETH Adm 1 shapefiles ----
shp <- readOGR("ETH-GADM-Adm-Boundaries", "gadm36_ETH_1")
# calculate mean index vals per polygon ----
r3.vals <- raster::extract(r3, shp)
r3mean <- lapply(r3.vals, FUN=mean)
shp@data$index_mean = as.numeric(r3.mean)
# map choropleth via leaflet ----
basemap <- leaflet() %>% addProviderTiles('CartoDB.Positron')
# define choropleth color palette for legend using values from other leaflet plots
bins <- c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, Inf)
pal <- colorBin("Spectral", domain = shp$index_mean, bins = bins)
# basemap
m <- basemap %>% addPolygons(data=shp,
color = "none",
weight = 2,
fillOpacity = 0.2)
# add ETH Adm 1 regions
m <- m %>%
addPolygons(data=shp,
fillColor = ~pal(shp$index_mean),
stroke = TRUE,
color = "grey",
weight=1,
dashArray = "",
fillOpacity = 0.35,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = TRUE),
label = shp$index_mean,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
# add legend
m <- m %>% addLegend(pal = pal,
values = shp$index_mean,
title = "Mean Flood/Drought Index Value",
position = "topright")
m
shp <- readOGR("ETH-GADM-Adm-Boundaries", "gadm36_ETH_1")
shp <- readOGR("Data/ETH-GADM-Adm-Boundaries", "gadm36_ETH_1")
# calculate mean index vals per polygon ----
r3.vals <- raster::extract(r3, shp)
r3mean <- lapply(r3.vals, FUN=mean)
shp@data$index_mean = as.numeric(r3.mean)
# map choropleth via leaflet ----
basemap <- leaflet() %>% addProviderTiles('CartoDB.Positron')
# define choropleth color palette for legend using values from other leaflet plots
bins <- c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, Inf)
pal <- colorBin("Spectral", domain = shp$index_mean, bins = bins)
# basemap
m <- basemap %>% addPolygons(data=shp,
color = "none",
weight = 2,
fillOpacity = 0.2)
# add ETH Adm 1 regions
m <- m %>%
addPolygons(data=shp,
fillColor = ~pal(shp$index_mean),
stroke = TRUE,
color = "grey",
weight=1,
dashArray = "",
fillOpacity = 0.35,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = TRUE),
label = shp$index_mean,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
# add legend
m <- m %>% addLegend(pal = pal,
values = shp$index_mean,
title = "Mean Flood/Drought Index Value",
position = "topright")
m
r3 <- overlay(r1, r2, fun=function(x, y){return( (x + y)/2 )})
# save raster to disk
writeRaster(r3,'simplified_palmer_index.tif',options=c('TFW=YES'))
writeRaster(r3,'simplified_palmer_index.tif',
overwrite= TRUE,
options=c('TFW=YES'))
# aggregate indices to ETH Adm 1 regions to map choropleth ----
# load ETH Adm 1 shapefiles ----
shp <- readOGR("Data/ETH-GADM-Adm-Boundaries", "gadm36_ETH_1")
# calculate mean index vals per polygon ----
r3.vals <- raster::extract(r3, shp)
r3mean <- lapply(r3.vals, FUN=mean)
shp@data$index_mean = as.numeric(r3.mean)
# map choropleth via leaflet ----
basemap <- leaflet() %>% addProviderTiles('CartoDB.Positron')
r3.mean <- lapply(r3.vals, FUN=mean)
shp@data$index_mean = as.numeric(r3.mean)
# map choropleth via leaflet ----
basemap <- leaflet() %>% addProviderTiles('CartoDB.Positron')
# define choropleth color palette for legend using values from other leaflet plots
bins <- c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, Inf)
pal <- colorBin("Spectral", domain = shp$index_mean, bins = bins)
# basemap
m <- basemap %>% addPolygons(data=shp,
color = "none",
weight = 2,
fillOpacity = 0.2)
# add ETH Adm 1 regions
m <- m %>%
addPolygons(data=shp,
fillColor = ~pal(shp$index_mean),
stroke = TRUE,
color = "grey",
weight=1,
dashArray = "",
fillOpacity = 0.35,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = TRUE),
label = shp$index_mean,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
# add legend
m <- m %>% addLegend(pal = pal,
values = shp$index_mean,
title = "Mean Flood/Drought Index Value",
position = "topright")
m
library(raster)
library(leaflet)
library(rgdal)
library(tidyverse)
basemap <- leaflet() %>% addProviderTiles('CartoDB.Positron')
shp_poverty <- readOGR("Data/final-poverty", "eth_adm1_poverty")
# load final poverty shapfile ----
shp_poverty <- readOGR("Data/final-poverty", "eth_adm1_poverty")
# define choropleth color palette for legend using values from other leaflet plots
bins <- c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, Inf)
pal <- colorBin("GnBu", domain = shp_poverty$MPI, bins = bins)
# basemap
m <- basemap %>% addPolygons(data=shp_poverty,
color = "grey",
weight = 2,
fillOpacity = 0.2)
# add ETH Adm 1 regions
m <- m %>%
addPolygons(data=shp_poverty,
fillColor = ~pal(shp_poverty$MPI),
stroke = TRUE,
color = "grey",
weight=1,
dashArray = "",
fillOpacity = 0.35,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = TRUE),
label = shp_poverty$MPI,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
pal <- colorBin("Spectral", domain = shp_poverty$MPI, bins = bins)
# basemap
m <- basemap %>% addPolygons(data=shp_poverty,
color = "grey",
weight = 2,
fillOpacity = 0.2)
# add ETH Adm 1 regions
m <- m %>%
addPolygons(data=shp_poverty,
fillColor = ~pal(shp_poverty$MPI),
stroke = TRUE,
color = "grey",
weight=1,
dashArray = "",
fillOpacity = 0.35,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = TRUE),
label = shp_poverty$MPI,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
# add legend
m <- m %>% addLegend(pal = pal,
values = shp_poverty$MPI,
title = "2020 MPI",
position = "topright")
m
# add legend
m <- m %>% addLegend(pal = pal,
values = shp_poverty$MPI,
title = "2020 MPI",
position = "topright")
m
library(raster)
library(leaflet)
library(rgdal)
library(tidyverse)
basemap <- leaflet() %>% addProviderTiles('CartoDB.Positron')
# load final poverty shapfile ----
shp_poverty <- readOGR("Data/final-poverty", "eth_adm1_poverty")
# define choropleth color palette for legend using values from other leaflet plots
bins <- c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, Inf)
pal <- colorBin("Spectral", domain = shp_poverty$MPI, bins = bins)
# basemap
m <- basemap %>% addPolygons(data=shp_poverty,
color = "grey",
weight = 2,
fillOpacity = 0.2)
# add ETH Adm 1 regions
m <- m %>%
addPolygons(data=shp_poverty,
fillColor = ~pal(shp_poverty$MPI),
stroke = TRUE,
color = "grey",
weight=1,
dashArray = "",
fillOpacity = 0.35,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = TRUE),
label = shp_poverty$MPI,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
# add legend
m <- m %>% addLegend(pal = pal,
values = shp_poverty$MPI,
title = "2020 MPI",
position = "topright")
m
library(raster)
library(leaflet)
library(rgdal)
library(tidyverse)
basemap <- leaflet() %>% addProviderTiles('CartoDB.Positron')
# load final poverty shapfile ----
shp_poverty <- readOGR("Data/final-poverty", "eth_adm1_poverty")
palette = 'Spectral'
# define choropleth color palette for legend using values from other leaflet plots
bins <- c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, Inf)
pal <- colorBin(palette, domain = shp_poverty$MPI, bins = bins)
# basemap
m <- basemap %>% addPolygons(data=shp_poverty,
color = "grey",
weight = 2,
fillOpacity = 0.2)
# add ETH Adm 1 regions
m <- m %>%
addPolygons(data=shp_poverty,
fillColor = ~pal(shp_poverty$MPI),
stroke = TRUE,
color = "grey",
weight=1,
dashArray = "",
fillOpacity = 0.35,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = TRUE),
label = shp_poverty$MPI,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
# add legend
m <- m %>% addLegend(pal = pal,
values = shp_poverty$MPI,
title = "2020 MPI",
position = "topright")
m
library(raster)
library(leaflet)
library(rgdal)
library(tidyverse)
basemap <- leaflet() %>% addProviderTiles('CartoDB.Positron')
# load final poverty shapfile ----
shp_poverty <- readOGR("Data/final-poverty", "eth_adm1_poverty")
palette = 'Blues'
# define choropleth color palette for legend using values from other leaflet plots
bins <- c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, Inf)
pal <- colorBin(palette, domain = shp_poverty$MPI, bins = bins)
# basemap
m <- basemap %>% addPolygons(data=shp_poverty,
color = "grey",
weight = 2,
fillOpacity = 0.2)
# add ETH Adm 1 regions
m <- m %>%
addPolygons(data=shp_poverty,
fillColor = ~pal(shp_poverty$MPI),
stroke = TRUE,
color = "grey",
weight=1,
dashArray = "",
fillOpacity = 0.35,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = TRUE),
label = shp_poverty$MPI,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
# add legend
m <- m %>% addLegend(pal = pal,
values = shp_poverty$MPI,
title = "2020 MPI",
position = "topright")
m
library(raster)
library(leaflet)
library(rgdal)
library(tidyverse)
basemap <- leaflet() %>% addProviderTiles('CartoDB.Positron')
# load final poverty shapfile ----
shp_poverty <- readOGR("Data/final-poverty", "eth_adm1_poverty")
palette = 'Accent2'
# define choropleth color palette for legend using values from other leaflet plots
bins <- c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, Inf)
pal <- colorBin(palette, domain = shp_poverty$MPI, bins = bins)
# basemap
m <- basemap %>% addPolygons(data=shp_poverty,
color = "grey",
weight = 2,
fillOpacity = 0.2)
# add ETH Adm 1 regions
m <- m %>%
addPolygons(data=shp_poverty,
fillColor = ~pal(shp_poverty$MPI),
stroke = TRUE,
color = "grey",
weight=1,
dashArray = "",
fillOpacity = 0.35,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = TRUE),
label = shp_poverty$MPI,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
# add legend
m <- m %>% addLegend(pal = pal,
values = shp_poverty$MPI,
title = "2020 MPI",
position = "topright")
m
library(raster)
library(leaflet)
library(rgdal)
library(tidyverse)
basemap <- leaflet() %>% addProviderTiles('CartoDB.Positron')
# load final poverty shapfile ----
shp_poverty <- readOGR("Data/final-poverty", "eth_adm1_poverty")
palette = 'Spectral'
# define choropleth color palette for legend using values from other leaflet plots
bins <- c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, Inf)
pal <- colorBin(palette, domain = shp_poverty$MPI, bins = bins)
# basemap
m <- basemap %>% addPolygons(data=shp_poverty,
color = "grey",
weight = 2,
fillOpacity = 0.2)
# add ETH Adm 1 regions
m <- m %>%
addPolygons(data=shp_poverty,
fillColor = ~pal(shp_poverty$MPI),
stroke = TRUE,
color = "grey",
weight=1,
dashArray = "",
fillOpacity = 0.35,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = TRUE),
label = shp_poverty$MPI,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
# add legend
m <- m %>% addLegend(pal = pal,
values = shp_poverty$MPI,
title = "2020 MPI",
position = "topright")
m
shp_conflict <- readOGR("Data/final-conflict", "eth_adm1_conflict")
r = 0:1.6
r
seq(0, 1.6, by=0.2)
seq(0, 0.5, by=0.1)
c(seq(0, 0.5, by=0.1), Inf)
# basemap
m <- basemap %>% addPolygons(data=shp_conflict,
color = "grey",
weight = 2,
fillOpacity = 0.2)
pal <- colorBin(palette, domain = shp_conflict$fataliti_1, bins = bins)
bins <- c(seq(0, 1.6, by=0.2), Inf)
shp_conflict <- readOGR("Data/final-conflict", "eth_adm1_conflict")
basemap <- leaflet() %>% addProviderTiles('CartoDB.Positron')
palette = 'Spectral'
shp_conflict <- readOGR("Data/final-conflict", "eth_adm1_conflict")
# define choropleth color palette for legend using values from other leaflet plots
bins <- c(seq(0, 1.6, by=0.2), Inf)
pal <- colorBin(palette, domain = shp_conflict$fataliti_1, bins = bins)
# basemap
m <- basemap %>% addPolygons(data=shp_conflict,
color = "grey",
weight = 2,
fillOpacity = 0.2)
# add ETH Adm 1 regions
m <- m %>%
addPolygons(data=shp_conflict,
fillColor = ~pal(shp_conflict$fataliti_1),
stroke = TRUE,
color = "grey",
weight=1,
dashArray = "",
fillOpacity = 0.35,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = TRUE),
label = shp_conflict$fataliti_1,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
# add legend
m <- m %>% addLegend(pal = pal,
values = shp_conflict$fataliti_1,
title = "Fatalities per 100k",
position = "topright")
m
