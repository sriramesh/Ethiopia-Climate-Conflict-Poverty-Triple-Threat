position = "topright")
m
library(raster)
library(leaflet)
library(rgdal)
library(tidyverse)
basemap <- leaflet() %>% addProviderTiles('CartoDB.Positron')
# load final poverty shapfile ----
shp_poverty <- readOGR("Data/final-poverty", "eth_adm1_poverty")
palette = 'Spectral'
# define choropleth color palette for legend using values from other leaflet plots
bins <- c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, Inf)
pal <- colorBin(palette, domain = shp_poverty$MPI, bins = bins)
# basemap
m <- basemap %>% addPolygons(data=shp_poverty,
color = "grey",
weight = 2,
fillOpacity = 0.2)
# add ETH Adm 1 regions
m <- m %>%
addPolygons(data=shp_poverty,
fillColor = ~pal(shp_poverty$MPI),
stroke = TRUE,
color = "grey",
weight=1,
dashArray = "",
fillOpacity = 0.35,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = TRUE),
label = shp_poverty$MPI,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
# add legend
m <- m %>% addLegend(pal = pal,
values = shp_poverty$MPI,
title = "2020 MPI",
position = "topright")
m
library(raster)
library(leaflet)
library(rgdal)
library(tidyverse)
basemap <- leaflet() %>% addProviderTiles('CartoDB.Positron')
# load final poverty shapfile ----
shp_poverty <- readOGR("Data/final-poverty", "eth_adm1_poverty")
palette = 'Blues'
# define choropleth color palette for legend using values from other leaflet plots
bins <- c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, Inf)
pal <- colorBin(palette, domain = shp_poverty$MPI, bins = bins)
# basemap
m <- basemap %>% addPolygons(data=shp_poverty,
color = "grey",
weight = 2,
fillOpacity = 0.2)
# add ETH Adm 1 regions
m <- m %>%
addPolygons(data=shp_poverty,
fillColor = ~pal(shp_poverty$MPI),
stroke = TRUE,
color = "grey",
weight=1,
dashArray = "",
fillOpacity = 0.35,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = TRUE),
label = shp_poverty$MPI,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
# add legend
m <- m %>% addLegend(pal = pal,
values = shp_poverty$MPI,
title = "2020 MPI",
position = "topright")
m
library(raster)
library(leaflet)
library(rgdal)
library(tidyverse)
basemap <- leaflet() %>% addProviderTiles('CartoDB.Positron')
# load final poverty shapfile ----
shp_poverty <- readOGR("Data/final-poverty", "eth_adm1_poverty")
palette = 'Accent2'
# define choropleth color palette for legend using values from other leaflet plots
bins <- c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, Inf)
pal <- colorBin(palette, domain = shp_poverty$MPI, bins = bins)
# basemap
m <- basemap %>% addPolygons(data=shp_poverty,
color = "grey",
weight = 2,
fillOpacity = 0.2)
# add ETH Adm 1 regions
m <- m %>%
addPolygons(data=shp_poverty,
fillColor = ~pal(shp_poverty$MPI),
stroke = TRUE,
color = "grey",
weight=1,
dashArray = "",
fillOpacity = 0.35,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = TRUE),
label = shp_poverty$MPI,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
# add legend
m <- m %>% addLegend(pal = pal,
values = shp_poverty$MPI,
title = "2020 MPI",
position = "topright")
m
library(raster)
library(leaflet)
library(rgdal)
library(tidyverse)
basemap <- leaflet() %>% addProviderTiles('CartoDB.Positron')
# load final poverty shapfile ----
shp_poverty <- readOGR("Data/final-poverty", "eth_adm1_poverty")
palette = 'Spectral'
# define choropleth color palette for legend using values from other leaflet plots
bins <- c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, Inf)
pal <- colorBin(palette, domain = shp_poverty$MPI, bins = bins)
# basemap
m <- basemap %>% addPolygons(data=shp_poverty,
color = "grey",
weight = 2,
fillOpacity = 0.2)
# add ETH Adm 1 regions
m <- m %>%
addPolygons(data=shp_poverty,
fillColor = ~pal(shp_poverty$MPI),
stroke = TRUE,
color = "grey",
weight=1,
dashArray = "",
fillOpacity = 0.35,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = TRUE),
label = shp_poverty$MPI,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
# add legend
m <- m %>% addLegend(pal = pal,
values = shp_poverty$MPI,
title = "2020 MPI",
position = "topright")
m
shp_conflict <- readOGR("Data/final-conflict", "eth_adm1_conflict")
r = 0:1.6
r
seq(0, 1.6, by=0.2)
seq(0, 0.5, by=0.1)
c(seq(0, 0.5, by=0.1), Inf)
# basemap
m <- basemap %>% addPolygons(data=shp_conflict,
color = "grey",
weight = 2,
fillOpacity = 0.2)
pal <- colorBin(palette, domain = shp_conflict$fataliti_1, bins = bins)
bins <- c(seq(0, 1.6, by=0.2), Inf)
shp_conflict <- readOGR("Data/final-conflict", "eth_adm1_conflict")
basemap <- leaflet() %>% addProviderTiles('CartoDB.Positron')
palette = 'Spectral'
shp_conflict <- readOGR("Data/final-conflict", "eth_adm1_conflict")
# define choropleth color palette for legend using values from other leaflet plots
bins <- c(seq(0, 1.6, by=0.2), Inf)
pal <- colorBin(palette, domain = shp_conflict$fataliti_1, bins = bins)
# basemap
m <- basemap %>% addPolygons(data=shp_conflict,
color = "grey",
weight = 2,
fillOpacity = 0.2)
# add ETH Adm 1 regions
m <- m %>%
addPolygons(data=shp_conflict,
fillColor = ~pal(shp_conflict$fataliti_1),
stroke = TRUE,
color = "grey",
weight=1,
dashArray = "",
fillOpacity = 0.35,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = TRUE),
label = shp_conflict$fataliti_1,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
# add legend
m <- m %>% addLegend(pal = pal,
values = shp_conflict$fataliti_1,
title = "Fatalities per 100k",
position = "topright")
m
knitr::opts_chunk$set(echo = TRUE)
# load required libraries ---
library(raster)
library(leaflet)
library(rgdal)
library(tidyverse)
# palette used for choropleth maps
palette_poverty_conflict = "Spectral"
palette_climate_change = "Accent"
# load ETH Adm 1 shp ----
shp <- readOGR("Data/ETH-GADM-Adm-Boundaries", "gadm36_ETH_1")
# load final poverty shp ----
shp_poverty <- readOGR("Data/final-poverty", "eth_adm1_poverty")
# load final conflict shp ----
shp_conflict <- readOGR("Data/final-conflict", "eth_adm1_conflict")
# map choropleth via leaflet ----
basemap <- leaflet() %>% addProviderTiles('CartoDB.Positron')
m <- basemap %>% addPolygons(data=shp,
color = "green",
weight = 1,
label = shp$NAME_1,
fillOpacity = 0.2)
m
# define choropleth color palette for legend using values from other leaflet plots
bins <- c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, Inf)
pal <- colorBin(palette_poverty_conflict, domain = shp_poverty$MPI, bins = bins)
# basemap
m <- basemap %>% addPolygons(data=shp_poverty,
color = "none",
weight = 2,
fillOpacity = 0.2)
# add ETH Adm 1 regions
m <- m %>%
addPolygons(data=shp_poverty,
fillColor = ~pal(shp_poverty$MPI),
stroke = TRUE,
color = "grey",
weight=1,
dashArray = "",
fillOpacity = 0.35,
highlight = highlightOptions(
weight = 2,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = TRUE),
label = shp_poverty$MPI,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
# add legend
m <- m %>% addLegend(pal = pal,
values = shp_poverty$MPI,
title = "2020 MPI",
position = "topright")
m
shp_poverty$MPI
#shp_poverty$MPI
shp_poverty$NAME_1
library(knitr)
library(kable)
library(kableExtra)
kbl(shp_poverty)
shp_poverty %>% select(NAME_1, MPI)
shp_poverty %>% as.data.frame() %>% select(NAME_1, MPI)
df <- shp_poverty %>% as.data.frame() %>% select(NAME_1, MPI)
View(df)
kbl(df)
df <- shp_poverty %>% as.data.frame() %>% select(NAME_1, MPI)
kbl(df)
df <- shp_poverty %>% as.data.frame() %>% select(NAME_1, MPI)
df %>% kbl() %>% kable_styling()
library(kableExtra)
library(knitr)
df <- shp_poverty %>% as.data.frame() %>% select(NAME_1, MPI)
df %>% kbl() %>% kable_styling()
df %>% kbl() %>% kable_material(c("striped", "hover")) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
View(df)
?arrange
df <- shp_poverty %>% as.data.frame() %>% select(NAME_1, MPI) %>% arrange(MPI)
View(df)
df <- shp_poverty %>% as.data.frame() %>% select(NAME_1, MPI) %>% desc(MPI)
df <- shp_poverty %>% as.data.frame() %>% select(NAME_1, desc(MPI))
df <- shp_poverty %>% as.data.frame() %>% select(NAME_1, MPI) %>% arrange(desc(MPI))
?rename
df <- shp_poverty %>% as.data.frame() %>%
select(NAME_1, MPI) %>% arrange(desc(MPI)) %>% rename('District (Adm 1)' = NAME_1)
View(df)
df %>% kbl() %>% kable_material(c("striped", "hover")) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
knitr::opts_chunk$set(echo = TRUE)
# load required libraries ---
library(raster)
library(leaflet)
library(rgdal)
library(tidyverse)
library(kableExtra)
library(knitr)
# palette used for choropleth maps
palette_poverty_conflict = "Spectral"
palette_climate_change = "Accent"
# load ETH Adm 1 shp ----
shp <- readOGR("Data/ETH-GADM-Adm-Boundaries", "gadm36_ETH_1")
# load final poverty shp ----
shp_poverty <- readOGR("Data/final-poverty", "eth_adm1_poverty")
# load final conflict shp ----
shp_conflict <- readOGR("Data/final-conflict", "eth_adm1_conflict")
df <- shp_poverty %>% as.data.frame() %>%
select(NAME_1, MPI) %>% arrange(desc(MPI)) %>% rename('District (Adm 1)' = NAME_1)
df %>% kbl() %>% kable_material(c("striped", "hover"))
# map conflict ----
# define choropleth color palette for legend using values from other leaflet plots
bins <- c(seq(0, 1.6, by=0.2), Inf)
pal <- colorBin(palette_poverty_conflict, domain = shp_conflict$fataliti_1, bins = bins)
# basemap
m <- basemap %>% addPolygons(data=shp_conflict,
color = "none",
weight = 2,
fillOpacity = 0.2)
# add ETH Adm 1 regions
m <- m %>%
addPolygons(data=shp_conflict,
fillColor = ~pal(shp_conflict$fataliti_1),
stroke = TRUE,
color = "grey",
weight=1,
dashArray = "",
fillOpacity = 0.35,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = TRUE),
label = shp_conflict$fataliti_1,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
# add legend
m <- m %>% addLegend(pal = pal,
values = shp_conflict$fataliti_1,
title = "Fatalities per 100k",
position = "topright")
m
df <- shp_conflict %>% as.data.frame() %>%
select(NAME_1, fataliti_1) %>% arrange(desc(fataliti_1)) %>% rename('District (Adm 1)' = NAME_1)
df %>% kbl() %>% kable_material(c("striped", "hover"))
df <- shp_conflict %>% as.data.frame() %>%
select(NAME_1, fataliti_1) %>% arrange(desc(fataliti_1)) %>% rename('District (Adm 1)' = NAME_1,
'Fatalities per 100k' = fataliti_1)
df %>% kbl() %>% kable_material(c("striped", "hover"))
# download data: GADM ETH Adm0 boundaries and WorldClim database ----
ETH_Adm0 <- raster::getData(name = "GADM", country = "ETH", level = 0)
ETH_bio <- raster::getData(name = "worldclim", var = "bio", res = 2.5) # rasterstack
# get annual trends data (bio1, annual mean temp and bio12, precipitation) ----
ETH_bio1 <- ETH_bio[[1]] # annual mean temp in Ethiopia from 1970 to 2000
ETH_bio12 <- ETH_bio[[12]] # annual precipitation in Ethiopia from 1970 to 2000
# Crop and mask each raster layer to Ethiopia extent ----
ETH_bio1 <- raster::crop(x = ETH_bio1, y = ETH_Adm0)
ETH_bio1 <- raster::mask(x = ETH_bio1, mask = ETH_Adm0)
ETH_bio12 <- raster::crop(x = ETH_bio12, y = ETH_Adm0)
ETH_bio12 <- raster::mask(x = ETH_bio12, mask = ETH_Adm0)
# normalize bio1 data using the following formula: (actual val - min val) / (max val - min val) ----
r1 <- ETH_bio1
min_val = minValue(ETH_bio1)
max_val = maxValue(ETH_bio1)
r1 <- overlay(r1, fun=function(x){return( (x - min_val)/(max_val - min_val) )})
# normalize bio12 data using same formula ----
r2 <- ETH_bio12
min_val = minValue(ETH_bio12)
max_val = maxValue(ETH_bio12)
r2 <- overlay(r2, fun=function(x){return( (x - min_val)/(max_val - min_val) )})
raster_colorPal <- colorNumeric(palette = heat.colors(64),
domain = values(r1),
na.color = NA)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(x = r1,
color = raster_colorPal) %>%
addLegend(title = "Bio 1 Annual Mean Temp - Normalized",
values = values(r1),
pal = raster_colorPal)
raster_colorPal <- colorNumeric(palette = heat.colors(64),
domain = values(r2),
na.color = NA)
leaflet() %>% # Plot
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(x = r2,
color = raster_colorPal) %>%
addLegend(title = "Bio 12 Annual Precipitation - Normalized",
values = values(r2),
pal = raster_colorPal)
# resample bio12 raster to bio1 extent and resolution using bilinear interpolation
r2 <- r2 %>%
raster::resample(r1, method="bilinear")
r1
r2
# generate simplified Palmer Drought Severity Index by taking mean of the two normalized indices ----
r3 <- overlay(r1, r2, fun=function(x, y){return( (x + y)/2 )})
raster_colorPal <- colorNumeric(palette = heat.colors(64),
domain = values(r3),
na.color = NA)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(x = r3,
color = raster_colorPal) %>%
addLegend(title = "Simplified PDSI Values",
values = values(r3),
pal = raster_colorPal)
# calculate mean index vals per polygon ----
r3.vals <- raster::extract(r3, shp)
r3.mean <- lapply(r3.vals, FUN=mean)
shp@data$index_mean = as.numeric(r3.mean)
# define choropleth color palette for legend using values from other leaflet plots
bins <- c(0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, Inf)
pal <- colorBin(palette_climate_change, domain = shp$index_mean, bins = bins)
# basemap
m <- basemap %>% addPolygons(data=shp,
color = "none",
weight = 2,
fillOpacity = 0.2)
# add ETH Adm 1 regions
m <- m %>%
addPolygons(data=shp,
fillColor = ~pal(shp$index_mean),
stroke = TRUE,
color = "grey",
weight=1,
dashArray = "",
fillOpacity = 0.35,
highlight = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = TRUE),
label = shp$index_mean,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
# add legend
m <- m %>% addLegend(pal = pal,
values = shp$index_mean,
title = "Simplified PDSI - Mean",
position = "topright")
m
shp$NAME_1
shp$index_mean
df <- shp %>% as.data.frame() %>%
select(NAME_1, index_mean) %>% arrange(desc(index_mean)) %>% rename('District (Adm 1)' = NAME_1,
'Index Mean' = index_mean)
df %>% kbl() %>% kable_material(c("striped", "hover"))
# poverty
dfA <- shp_poverty %>% as.data.frame() %>%
select(NAME_1, MPI) %>% arrange(desc(MPI)) %>% rename('District (Adm 1)' = NAME_1)
# conflict
dfB <- shp_conflict %>% as.data.frame() %>%
select(NAME_1, fataliti_1) %>% arrange(desc(fataliti_1)) %>% rename('District (Adm 1)' = NAME_1,
'Fatalities per 100k' = fataliti_1)
# climate
dfC <- shp %>% as.data.frame() %>%
select(NAME_1, index_mean) %>% arrange(desc(index_mean)) %>% rename('District (Adm 1)' = NAME_1,
'Mean PDSI Value' = index_mean)
rm(df)
View(dfA)
View(dfB)
View(dfC)
left_join(dfA, dfB, by = "District (Adm 1)")
x = left_join(dfA, dfB, by = "District (Adm 1)")
left_join(x, dfC, by = "District (Adm 1)")
a = left_join(dfA, dfB, by = "District (Adm 1)")
a = left_join(x, dfC, by = "District (Adm 1)")
a
a %>% arrange("District (Adm 1)")
a %>% arrange(desc("District (Adm 1)"))
a %>% colnames()
a %>% arrange(desc("District (Adm 1)"))
a %>% arrange("District (Adm 1)")
a %>% arrange("District (Adm 1)")
a %>% rename(NAME_1 = 'District (Adm 1)')
a %>% rename(NAME_1 = 'District (Adm 1)') %>% arrange(NAME_1)
a %>% rename(NAME_1 = 'District (Adm 1)') %>% arrange(NAME_1) %>% rename('District (Adm 1)' = NAME_1)
df <- left_join(dfA, dfB, by = "District (Adm 1)")
df <- left_join(df, dfC, by = "District (Adm 1)")
df <- df %>% rename(NAME_1 = 'District (Adm 1)') %>%
arrange(NAME_1) %>% rename('District (Adm 1)' = NAME_1)
df %>% kbl() %>% kable_material(c("striped", "hover"))
