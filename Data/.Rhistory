ETH_prec_2.5_Nov_Crop_resampled_bilin <- ETH_prec_2.5_Nov_Crop %>%
raster::resample(ETH_elev, method="bilinear")
ETH_prec_2.5_Nov_Crop_resampled_bilin
ETH_elev
r1 <- ETH_prec_2.5_Nov_Crop_resampled_bilin
r2 <- ETH_elev
r3 <- overlay(r1, r2, fun=function(x,y){return(x+y)})
raster_colorPal_elev <- colorNumeric(palette = topo.colors(64),
domain = values(r3),
na.color = NA) # Define palette
leaflet() %>% # Plot
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(x = r3,
color = raster_colorPal_elev) %>%
addLegend(title = "Elevation<br>(meters)",
values = values(r3),
pal = raster_colorPal_elev)
leaflet() %>% # Plot
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(x = r3,
color = raster_colorPal_elev) %>%
addLegend(title = "Elevation and Temp added",
values = values(r3),
pal = raster_colorPal_elev)
r3 <- overlay(r1, r2, fun=function(x,y){return(x*y)})
raster_colorPal_elev <- colorNumeric(palette = topo.colors(64),
domain = values(r3),
na.color = NA) # Define palette
leaflet() %>% # Plot
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(x = r3,
color = raster_colorPal_elev) %>%
addLegend(title = "Elevation and Temp added",
values = values(r3),
pal = raster_colorPal_elev)
raster_colorPal_elev <- colorNumeric(palette = topo.colors(64),
domain = values(r3),
na.color = NA) # Define palette
leaflet() %>% # Plot
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(x = r3,
color = raster_colorPal_elev) %>%
addLegend(title = "Elevation and Temp multiplied",
values = values(r3),
pal = raster_colorPal_elev)
# load required libraries
library(raster)
library(leaflet)
library(rgdal)
library(tidyverse)
# download ETH Adm0 boundaries and precipitation data from worldclim.org ----
ETH_Adm0 <- raster::getData(name = "GADM", country = "ETH", level = 0)
ETH_prec_2.5 <- raster::getData(name = "worldclim", var = "prec",
res = 2.5) # rasterstack
# Restrict to Nov (rasterlayer)
ETH_prec_2.5_Nov <- ETH_prec_2.5[[11]]
# Crop and Mask to Ethiopia extent
ETH_prec_2.5_Nov_Crop_Unmasked <- raster::crop(x = ETH_prec_2.5_Nov, y = ETH_Adm0)
ETH_prec_2.5_Nov_Crop <- raster::mask(x = ETH_prec_2.5_Nov_Crop_Unmasked, mask = ETH_Adm0)
# colormap
raster_colorPal_prec_Nov <- colorNumeric(palette = topo.colors(64),
domain = values(ETH_prec_2.5_Nov_Crop),
na.color = NA)
# map precipitation
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(x = ETH_prec_2.5_Nov_Crop,
color = raster_colorPal_prec_Nov) %>%
addLegend(title = "Nov precipitation (mm)<br>(2.5' res)",
values = values(ETH_prec_2.5_Nov_Crop),
pal = raster_colorPal_prec_Nov)
# load required libraries
library(raster)
library(leaflet)
library(rgdal)
library(tidyverse)
# download ETH Adm1 boundaries and elevation data ----
ETH_Adm_1 <- raster::getData(name = "GADM", country = "ETH", level = 1) #Adm1
ETH_elev <- raster::getData(name = "alt", country = "ETH") # Elevation (meters)
# colormap for elevation
raster_colorPal_elev <- colorNumeric(palette = topo.colors(64),
domain = values(ETH_elev),
na.color = NA)
# plot elevation
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(x = ETH_elev,
color = raster_colorPal_elev) %>%
addLegend(title = "Elevation<br>(meters)",
values = values(ETH_elev),
pal = raster_colorPal_elev)
# load required libraries
library(raster)
library(leaflet)
library(rgdal)
library(tidyverse)
ETH_prec_2.5_Nov_Crop
ETH_elev # precipitation raster has lower resolution than elevation raster, so must resample it
# resample elevation raster using bilinear interpolation (continuous variables)
ETH_prec_2.5_Nov_Crop_resampled <- ETH_prec_2.5_Nov_Crop %>%
raster::resample(ETH_elev, method="bilinear")
# apply map algebra
r1 <- ETH_prec_2.5_Nov_Crop_resampled
r2 <- ETH_elev
r3 <- overlay(r1, r2, fun=function(x,y){return(x*y)})
raster_colorPal_elev <- colorNumeric(palette = topo.colors(64),
domain = values(r3),
na.color = NA) # Define palette
leaflet() %>% # Plot
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(x = r3,
color = raster_colorPal_elev) %>%
addLegend(title = "Elevation and Temp multiplied",
values = values(r3),
pal = raster_colorPal_elev)
# load required libraries
library(raster)
library(leaflet)
library(rgdal)
library(tidyverse)
ETH_prec_2.5_Nov_Crop
ETH_elev # precipitation raster has lower resolution than elevation raster, so must resample it
# resample elevation raster using bilinear interpolation (continuous variables)
ETH_prec_2.5_Nov_Crop_resampled <- ETH_prec_2.5_Nov_Crop %>%
raster::resample(ETH_elev, method="bilinear")
# apply map algebra - but what function to use?
r1 <- ETH_prec_2.5_Nov_Crop_resampled
r2 <- ETH_elev
r3 <- overlay(r1, r2, fun=function(x,y){return(x*y)}) # multiplication
# colormap
raster_colorPal_elev <- colorNumeric(palette = topo.colors(64),
domain = values(r3),
na.color = NA)
leaflet() %>% # Plot
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(x = r3,
color = raster_colorPal_elev) %>%
addLegend(title = "Elevation and Temp multiplied",
values = values(r3),
pal = raster_colorPal_elev)
r4 <- overlay(r1, r2, fun=function(x,y){return(x+y)}) # addition
# colormap
raster_colorPal_elev <- colorNumeric(palette = topo.colors(64),
domain = values(r4),
na.color = NA)
leaflet() %>% # Plot
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(x = r4,
color = raster_colorPal_elev) %>%
addLegend(title = "Elevation and Temp multiplied",
values = values(r4),
pal = raster_colorPal_elev)
# load required libraries
library(raster)
library(leaflet)
library(rgdal)
library(tidyverse)
ETH_prec_2.5_Nov_Crop
ETH_elev # precipitation raster has lower resolution than elevation raster, so must resample it
# resample elevation raster using bilinear interpolation (continuous variables)
ETH_prec_2.5_Nov_Crop_resampled <- ETH_prec_2.5_Nov_Crop %>%
raster::resample(ETH_elev, method="bilinear")
# apply map algebra - but what function to use?
r1 <- ETH_prec_2.5_Nov_Crop_resampled
r2 <- ETH_elev
r3 <- overlay(r1, r2, fun=function(x,y){return(x*y)}) # multiplication
# colormap
raster_colorPal_elev <- colorNumeric(palette = topo.colors(64),
domain = values(r3),
na.color = NA)
leaflet() %>% # Plot
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(x = r3,
color = raster_colorPal_elev) %>%
addLegend(title = "Elevation and Temp multiplied",
values = values(r3),
pal = raster_colorPal_elev)
r4 <- overlay(r1, r2, fun=function(x,y){return(x+y)}) # addition
# colormap
raster_colorPal_elev <- colorNumeric(palette = topo.colors(64),
domain = values(r4),
na.color = NA)
leaflet() %>% # Plot
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(x = r4,
color = raster_colorPal_elev) %>%
addLegend(title = "Elevation and Temp added",
values = values(r4),
pal = raster_colorPal_elev)
# load required libraries
library(raster)
library(leaflet)
library(rgdal)
library(tidyverse)
# download ETH Adm0 boundaries and precipitation data from worldclim.org ----
ETH_Adm0 <- raster::getData(name = "GADM", country = "ETH", level = 0)
ETH_prec_2.5 <- raster::getData(name = "worldclim", var = "prec",
res = 2.5) # rasterstack
# Restrict to Nov (rasterlayer)
ETH_prec_2.5_Nov <- ETH_prec_2.5[[11]]
# Crop and Mask to Ethiopia extent
ETH_prec_2.5_Nov_Crop_Unmasked <- raster::crop(x = ETH_prec_2.5_Nov, y = ETH_Adm0)
ETH_prec_2.5_Nov_Crop <- raster::mask(x = ETH_prec_2.5_Nov_Crop_Unmasked, mask = ETH_Adm0)
# colormap
raster_colorPal_prec_Nov <- colorNumeric(palette = topo.colors(64),
domain = values(ETH_prec_2.5_Nov_Crop),
na.color = NA)
# map precipitation
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(x = ETH_prec_2.5_Nov_Crop,
color = raster_colorPal_prec_Nov) %>%
addLegend(title = "Nov precipitation (mm)<br>(2.5' res)",
values = values(ETH_prec_2.5_Nov_Crop),
pal = raster_colorPal_prec_Nov)
# load required libraries
library(raster)
library(leaflet)
library(rgdal)
library(tidyverse)
# download ETH Adm1 boundaries and elevation data ----
ETH_Adm_1 <- raster::getData(name = "GADM", country = "ETH", level = 1) #Adm1
ETH_elev <- raster::getData(name = "alt", country = "ETH") # Elevation (meters)
# colormap for elevation
raster_colorPal_elev <- colorNumeric(palette = topo.colors(64),
domain = values(ETH_elev),
na.color = NA)
# plot elevation
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(x = ETH_elev,
color = raster_colorPal_elev) %>%
addLegend(title = "Elevation<br>(meters)",
values = values(ETH_elev),
pal = raster_colorPal_elev)
# generate basemap ----
basemap <- leaflet() %>% addProviderTiles("Esri.WorldGrayCanvas")
library(leaflet)
# generate basemap ----
basemap <- leaflet() %>% addProviderTiles("Esri.WorldGrayCanvas")
# define color ramp to use infection prevalence values as the legend ----
colorPal <- colorNumeric(wes_palette("Zissou1")[1:5], ETH_Adm_2$prevalence)
library(sp)
library(leaflet)
library(tidyverse)
refugee_sites <- readOGR("ETH-refugee-campsites", "Eth_refugee_camps_unhcr_2019") # refugee sites
??readOGR
library(rgdal)
refugee_sites <- readOGR("ETH-refugee-campsites", "Eth_refugee_camps_unhcr_2019") # refugee sites
basemap <- leaflet() %>% addProviderTiles("CartoDB.Positron")
basemap %>%
addCircleMarkers(data=refugee_sites,
radius=1)
wgs84 <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
proj4string(refugee_sites) <- wgs84 %>% CRS()
CRS(refugee_sites)
refugee_sites
wgs84 %>% CRS()
proj4string(refugee_sites)
proj4string(refugee_sites) <- wgs84 %>% CRS()
refugee_sites
crs(refugee_sites)
spTransform(refugee_sites, wgs84)
refugee_sites <- spTransform(refugee_sites, wgs84)
basemap <- leaflet() %>% addProviderTiles("CartoDB.Positron")
basemap %>%
addCircleMarkers(data=refugee_sites,
radius=1)
basemap <- leaflet() %>% addProviderTiles("CartoDB.Positron")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='green',
radius=1)
basemap <- leaflet() %>% addProviderTiles("CartoDB.Positron")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='green',
radius=3)
basemap <- leaflet() %>% addProviderTiles("CartoDB.Positron")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='green',
radius=3,
opacity = 0.5)
View(refugee_sites)
basemap <- leaflet() %>% addProviderTiles("CartoDB.Positron")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='green',
radius=3,
opacity = 0.5) %>%
addLegend(title = "Refugee Campsites")
basemap <- leaflet() %>% addProviderTiles("CartoDB.Positron")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='green',
radius=3,
opacity = 0.5)
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("CartoDB.Positron")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='green',
radius=10,
opacity = 0.5)
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("CartoDB.Positron")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='green',
radius=7,
stroke = F,
opacity = 0.5)
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("CartoDB.Positron")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='green',
radius=7,
stroke = F,
opacity = 1)
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("CartoDB.Positron")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='green',
radius=7,
stroke = F,
opacity = 2)
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("CartoDB.Positron")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='green',
radius=7,
stroke = F,
opacity = 5)
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("CartoDB.Positron")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='green',
radius=7,
stroke = F,
opacity = .4)
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("CartoDB.Positron")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='green',
radius=10,
stroke = F,
opacity = .4)
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("CartoDB.Positron")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='purple',
radius=10,
stroke = F,
opacity = .4)
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("Esri.NatGeoWorldMap")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='purple',
radius=10,
stroke = F,
opacity = .4)
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("Esri.NatGeoWorldMap")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='black',
radius=10,
stroke = F,
opacity = .4)
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("Esri.NatGeoWorldMap")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='pink',
radius=10,
stroke = F,
opacity = .4)
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("Esri.NatGeoWorldMap")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='purple',
radius=10,
stroke = F,
opacity = .4)
basemap <- leaflet() %>% addProviderTiles("Jawg.Dark")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='white',
radius=10,
stroke = F,
opacity = .4)
basemap <- leaflet() %>% addProviderTiles("Stamen.Terrain")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='white',
radius=10,
stroke = F,
opacity = .4)
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("Stamen.Terrain")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='black',
radius=10,
stroke = F,
opacity = .4)
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("Stamen.TonerLite")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='black',
radius=10,
stroke = F,
opacity = .4)
basemap <- leaflet() %>% addProviderTiles("Stamen.TonerLite")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='green',
radius=10,
stroke = F,
opacity = .4)
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("Esri.OceanBasemap")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='green',
radius=10,
stroke = F,
opacity = .4)
basemap <- leaflet() %>% addProviderTiles("Esri.OceanBasemap")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='darkblue',
radius=10,
stroke = F,
opacity = .4)
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("Esri.OceanBasemap")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='darkblue',
radius=10,
stroke = F)
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("Esri.OceanBasemap")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='darkblue',
radius=10,
stroke = F,
opacity=9)
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("Esri.OceanBasemap")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='darkblue',
radius=10,
stroke = F)
basemap <- leaflet() %>% addProviderTiles("Esri.OceanBasemap")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='darkblue',
radius=6,
stroke = F)
basemap <- leaflet() %>% addProviderTiles("Esri.OceanBasemap")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='darkblue',
radius=10,
stroke = F)
View(refugee_sites)
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("Esri.OceanBasemap")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='darkblue',
radius=10,
stroke = F,
popup = ~htmlEscape(Name))
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("Esri.OceanBasemap")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='darkblue',
radius=10,
stroke = F,
popup = ~Name)
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("Esri.OceanBasemap")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='darkblue',
radius=10,
stroke = F,
popup = Name)
# map refugee sites
basemap <- leaflet() %>% addProviderTiles("Esri.OceanBasemap")
basemap %>%
addCircleMarkers(data=refugee_sites,
color='darkblue',
radius=10,
stroke = F,
popup = ~refugee_sites$Name)
